# FalkorDB Configuration
# Use 'falkordb' when running in Docker, 'localhost' when running locally
FALKORDB_HOST=falkordb
FALKORDB_PORT=6379
FALKORDB_PASSWORD=

# OpenAI Configuration (for LLM-based extraction)
OPENAI_API_KEY= test
OPENAI_MODEL=gpt-4o
OPENAI_TEMPERATURE=0.7
OPENAI_MAX_TOKENS=2000

# LLM Feature Flags
ENABLE_LLM_EXTRACTION=true
ENABLE_LLM_ANALYSIS=true

# Logging Configuration
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_RELOAD=true

# =============================================================================
# JDBC Configuration
# =============================================================================
# Path to JDBC driver JAR files
# For Docker: use /app/jdbc_drivers, for local use your Windows path
JDBC_DRIVERS_PATH=D:\learning\dq-poc\jdbc_drivers

# =============================================================================
# Database Connection Settings for Reconciliation
# =============================================================================
# Enable/disable using environment variables for database configs
# If true, the system will use env configs when no configs are in the request payload
USE_ENV_DB_CONFIGS=true

# -----------------------------------------------------------------------------
# SOURCE DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# Database type: oracle, sqlserver, postgresql, mysql
SOURCE_DB_TYPE=sqlserver

# Database connection details
# Use 'host.docker.internal' to connect to host machine from Docker container
SOURCE_DB_HOST=DESKTOP-41O1AL9\LOCALHOST
SOURCE_DB_PORT=1433
SOURCE_DB_DATABASE=NewDQ

# Database credentials (leave empty for SQL export mode only)
SOURCE_DB_USERNAME=mithun
SOURCE_DB_PASSWORD=mithun123

# Oracle-specific: Service name (optional, use instead of SID)
SOURCE_DB_SERVICE_NAME=

# -----------------------------------------------------------------------------
# TARGET DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# Database type: oracle, sqlserver, postgresql, mysql
TARGET_DB_TYPE=sqlserver

# Database connection details
# Use 'host.docker.internal' to connect to host machine from Docker container
TARGET_DB_HOST=DESKTOP-41O1AL9\LOCALHOST
TARGET_DB_PORT=1433
TARGET_DB_DATABASE=NewDQ

# Database credentials (leave empty for SQL export mode only)
TARGET_DB_USERNAME=mithun
TARGET_DB_PASSWORD=mithun123

# Oracle-specific: Service name (optional, use instead of SID)
TARGET_DB_SERVICE_NAME=

LANDING_DB_ENABLED=true
  LANDING_DB_HOST=localhost
  LANDING_DB_PORT=3306
  LANDING_DB_DATABASE=reconciliation_landing
  LANDING_DB_USERNAME=root
  LANDING_DB_PASSWORD=Baps@1234

# =============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT DATABASE TYPES
# =============================================================================

# Oracle Example:
# SOURCE_DB_TYPE=oracle
# SOURCE_DB_HOST=oracle-server.company.com
# SOURCE_DB_PORT=1521
# SOURCE_DB_DATABASE=ORCL
# SOURCE_DB_USERNAME=schema1_user
# SOURCE_DB_PASSWORD=your_secure_password
# SOURCE_DB_SERVICE_NAME=PRODPDB

# SQL Server Example:
# SOURCE_DB_TYPE=sqlserver
# SOURCE_DB_HOST=sqlserver.company.com
# SOURCE_DB_PORT=1433
# SOURCE_DB_DATABASE=ProductionDB
# SOURCE_DB_USERNAME=sa
# SOURCE_DB_PASSWORD=your_secure_password

# PostgreSQL Example:
# SOURCE_DB_TYPE=postgresql
# SOURCE_DB_HOST=postgres.company.com
# SOURCE_DB_PORT=5432
# SOURCE_DB_DATABASE=production_db
# SOURCE_DB_USERNAME=postgres
# SOURCE_DB_PASSWORD=your_secure_password

# MySQL Example:
# SOURCE_DB_TYPE=mysql
# SOURCE_DB_HOST=mysql.company.com
# SOURCE_DB_PORT=3306
# SOURCE_DB_DATABASE=production_db
# SOURCE_DB_USERNAME=root
# SOURCE_DB_PASSWORD=your_secure_password

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. NEVER commit .env file to version control - add .env to .gitignore
# 2. Use read-only database users with SELECT permissions only
# 3. Use strong passwords (12+ characters, mixed case, numbers, symbols)
# 4. Rotate credentials regularly (every 90 days)
# 5. Use different credentials for dev/staging/prod environments
# 6. Consider using secrets management (AWS Secrets Manager, Azure Key Vault, etc.)
#
# Configuration Priority (highest to lowest):
# 1. Request payload (source_db_config in API request)
# 2. Environment variables (this file)
# 3. None (SQL export mode - no database execution)
#
# To use environment-based configs:
# - Copy .env.example to .env
# - Fill in database credentials
# - Set USE_ENV_DB_CONFIGS=true
# - Make API requests without source_db_config/target_db_config in payload

# =============================================================================
# MongoDB Configuration (for reconciliation results storage)
# =============================================================================
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_USERNAME=
MONGODB_PASSWORD=
MONGODB_DATABASE=reconciliation
MONGODB_AUTH_SOURCE=admin
MONGODB_RESULTS_COLLECTION=reconciliation_results

